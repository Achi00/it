
// import "./App.css";
import "./App.scss";
import { BrowserRouter as Router, Switch, Route } from "react-router-dom";
import Header from "./components/Header";
import { Canvas } from "@react-three/fiber";
import { useLoader, useFrame } from "@react-three/fiber";
import { Environment, useScroll, ScrollControls, Text, OrbitControls, ContactShadows, useGLTF, Html} from "@react-three/drei";
import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader";
import { Suspense, useRef, useEffect, useState } from "react";
import gsap from 'gsap'
import * as THREE from 'three'
import WorkSection from "./workSection/WorkSection";
import HeroPage from "./components/HeroPage"
import Grid from "./components/Grid/Grid";
import LastSection from "./components/LastSection";
import url from "./Matrix.mp4";


function Contact() {
  return <p>Contact us</p>;
}
//about page
function About() {
  return (
    <Canvas dpr={[1, 2]} camera={{ position: [-10, 0, -25], fov: 35 }}>
      <pointLight position={[10, 10, 10]} intensity={1.5} />
      <Suspense fallback={null}>
        <group rotation={[0, Math.PI/16, 0]}>
          <Laptop />
        </group>
        <Environment preset="city" />
      </Suspense>
      <ContactShadows rotation-x={Math.PI / 2} position={[0, -4.5, 0]} opacity={1} width={20} height={20} blur={2} far={4.5} />
      <OrbitControls enablePan={false} enableZoom={false} minPolarAngle={Math.PI / 2} maxPolarAngle={Math.PI / 2} maxAzimuthAngle={Math.PI / 4}  minAzimuthAngle={-Math.PI / 4}/>
    </Canvas>
  )
}

function Laptop(props) {
  const group = useRef()
  // Load model
  const { nodes, materials } = useGLTF('/mac-draco.glb')
  // Make it float
  useFrame((state) => {
    const t = state.clock.getElapsedTime()
    group.current.rotation.x = THREE.MathUtils.lerp(group.current.rotation.x, Math.cos(t / 2) / 10 + 0.25, 0.1)
    group.current.rotation.y = THREE.MathUtils.lerp(group.current.rotation.y, Math.sin(t / 4) / 10, 0.1)
    group.current.rotation.z = THREE.MathUtils.lerp(group.current.rotation.z, Math.sin(t / 4) / 20, 0.1)
    group.current.position.y = THREE.MathUtils.lerp(group.current.position.y, (-5 + Math.sin(t)) / 5, 0.1)
  })
  // The jsx graph was auto-generated by: https://github.com/pmndrs/gltfjsx
  return (
    <group ref={group} {...props} dispose={null}>
      <group rotation-x={-0.425} position={[0, -0.04, 0.41]}>
        <group position={[0, 2.96, -0.13]} rotation={[Math.PI / 2, 0, 0]}>
          <mesh material={materials.aluminium} geometry={nodes['Cube008'].geometry} />
          <mesh material={materials['matte.001']} geometry={nodes['Cube008_1'].geometry} />
          <mesh geometry={nodes['Cube008_2'].geometry}>
            {/* Drei's HTML component can now "hide behind" canvas geometry */}
            <Html className="content" rotation-x={-Math.PI / 2} position={[0, 0.05, -0.09]} transform occlude>
              <HeroPage />
            </Html>
          </mesh>
        </group>
      </group>
      <mesh material={materials.keys} geometry={nodes.keyboard.geometry} position={[1.79, 0, 3.45]} />
      <group position={[0, -0.1, 3.39]}>
        <mesh material={materials.aluminium} geometry={nodes['Cube002'].geometry} />
        <mesh material={materials.trackpad} geometry={nodes['Cube002_1'].geometry} />
      </group>
      <mesh material={materials.touchbar} geometry={nodes.touchbar.geometry} position={[0, -0.03, 1.2]} />
    </group>
  )
}

// home page
const Model = () => {
  const gltf = useLoader(GLTFLoader, "/cpu1.gltf");
  const cpuRef = useRef()

  useFrame(() => (cpuRef.current.rotation.z += 0.009))
  return (
    <group ref={cpuRef} rotation={[Math.PI / 2 , 0 , 0]} position={[-0.3,1,0.5]}>
      <primitive object={gltf.scene} scale={1.7} />
    </group>
  );
};
const Monitor = () => {
  const gltf = useLoader(GLTFLoader, "/monitor.gltf");
  const MonitorRef = useRef()
  useFrame((state) => {
    const t = state.clock.getElapsedTime()
    MonitorRef.current.rotation.y = THREE.MathUtils.lerp(MonitorRef.current.rotation.y, Math.sin(t / 4) / 10, 0.1)
    MonitorRef.current.position.y = THREE.MathUtils.lerp(MonitorRef.current.position.y, (-5 + Math.sin(t)) / 5, 0.1)
  })

  // useFrame(() => (cpuRef.current.rotation.z += 0.009))
  return (
    <group ref={MonitorRef} position={[0,0,0.5]}>
      <primitive object={gltf.scene} scale={0.7} />
    </group>
  );
};
// video texture
const TV = () => {
  const [video] = useState(() => {
    const vid = document.createElement("video");
    vid.src = url;
    vid.crossOrigin = "Anonymous";
    vid.loop = true;
    vid.muted = true;
    vid.play();
    return vid;
  });
  const MonitorRef = useRef()
  useFrame((state) => {
    const t = state.clock.getElapsedTime()
    MonitorRef.current.rotation.y = THREE.MathUtils.lerp(MonitorRef.current.rotation.y, Math.sin(t / 4) / 10, 0.1)
    MonitorRef.current.position.y = THREE.MathUtils.lerp(MonitorRef.current.position.y, (-5 + Math.sin(t)) / 5, 0.1)
  })

  return (
    <group ref={MonitorRef} >
      <mesh rotation={[0, 0, 0]} position={[0, 1, 0.3]}>
        <planeGeometry args={[2.65, 1.25]} />
        <meshStandardMaterial emissive={"white"} side={THREE.DoubleSide}>
          <videoTexture attach="map" args={[video]} />
          <videoTexture attach="emissiveMap" args={[video]} />
        </meshStandardMaterial>
      </mesh>
    </group>
  );
};

const SecondRow = () => {
  return(
    <>
    <group position={[-3, -2.5, 0]} scale={0.5}>
      <Monitor />
      <TV />
      <Text font="/OurFriendElectric-BWr8d.ttf"
        scale={[2, 2, 1]}
        position={[0.3, -1.2, 1]}
        color="#787878"
        anchorX="center"
        anchorY="middle">
      Text
    </Text>
    </group>
      <Html position={[-4.5, -2, -0.09]}>
        <Grid />
      </Html>
      {/* <OrbitControls /> */}
    </>
  )
}

function Model1(props) {
  const group = useRef();
  const { nodes, materials } = useGLTF("/pc.gltf");
  
  return (
    <group ref={group} {...props} dispose={null}>
      <group position={[0, 0, 0.5]} scale={0.013}>
        <group position={[-11.1, -56.6, 135.1]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Capsule_Mat10_0.geometry}
            material={nodes.Capsule_Mat10_0.material}
          />
        </group>
        <group position={[90, -56.6, 135.1]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Capsule_1_Mat10_0.geometry}
            material={nodes.Capsule_1_Mat10_0.material}
          />
        </group>
        <group position={[27, -43.3, 133]}>
          <mesh
            castShadow
            receiveShadow
            geometry={
              nodes.Cube_10_Extrusion_Extrusion_Cube_10_Extrusion_1_Mat9_0
                .geometry
            }
            material={materials["Mat.9"]}
          />
        </group>
        <group position={[27, -40.6, 133]}>
          <mesh
            castShadow
            receiveShadow
            geometry={
              nodes
                .Cube_10_Extrusion_Extrusion_Cube_10_Extrusion_Extrusion_Mat4_0
                .geometry
            }
            material={
              nodes
                .Cube_10_Extrusion_Extrusion_Cube_10_Extrusion_Extrusion_Mat4_0
                .material
            }
          />
        </group>
        <group position={[27, 175.5, 31.9]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cube_1_Cube_2_Mat4_0.geometry}
            material={nodes.Cube_1_Cube_2_Mat4_0.material}
          />
        </group>
        <group position={[69.1, 178.1, 32]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cube_8_Mat5_0.geometry}
            material={materials["Mat.5"]}
          />
        </group>
        <group position={[27, -43.5, -4.8]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cube_9_Cube_10_Cube_11_marron_0.geometry}
            material={materials.marron}
          />
        </group>
        <group position={[93.8, 4.1, 78.7]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cylindre_13_6_Mat28_0.geometry}
            material={materials["Mat.28"]}
          />
        </group>
        <group position={[93.8, 7.8, 78.7]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cylindre_14_5_Mat4_0.geometry}
            material={nodes.Cylindre_14_5_Mat4_0.material}
          />
        </group>
        {/* from */}
        <group position={[39.5, -56.6, 135.3]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cylindre_2_Cylindre_Mat11_0.geometry}
            material={nodes.Cylindre_2_Cylindre_Mat11_0.material}
          />
        </group>
        <group position={[0, 8.3, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Extrusion_Mat11_0.geometry}
            material={nodes.Extrusion_Mat11_0.material}
          />
        </group>
        <group position={[0, 8.3, 179.3]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Extrusion_1_Mat11_0.geometry}
            material={nodes.Extrusion_1_Mat11_0.material}
          />
        </group>
        <group position={[0, 8.3, 179.3]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Extrusion_2_Mat11_0.geometry}
            material={nodes.Extrusion_2_Mat11_0.material}
          />
        </group>
        <group position={[27, 94.6, -0.2]}>
          <mesh
            castShadow
            receiveShadow
            geometry={
              nodes.Extrusion_Cube_Cube_9_Extrusion_Extrusion_1_Mat7_0.geometry
            }
            material={materials["Mat.7_0"]}
          />
        </group>
        <group position={[27, 94.6, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={
              nodes
                .Extrusion_Cube_Cube_9_Extrusion_Extrusion_Extrusion_1_marron2_0
                .geometry
            }
            material={materials.marron2}
          />
        </group>
        <group position={[27, 94.6, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={
              nodes.Extrusion_Cube_Cube_9_Extrusion_Extrusion_Extrusion_5_Mat4_0
                .geometry
            }
            material={
              nodes.Extrusion_Cube_Cube_9_Extrusion_Extrusion_Extrusion_5_Mat4_0
                .material
            }
          />
        </group>
        {/* screen */}
        <group position={[23, 104, 60]}>
          <group scale={21}  position={[25, 0, -0.15]} rotation-x={-Math.PI / 20}>
            <Html className="content1" transform occlude>
              {/* <HeroPage /> */}
              <LastSection />
            </Html>
          </group>
        </group>
        {/* to */}
        <group position={[113.9, 57.5, 113.6]} rotation={[-0.3, 0, 0]}>
          <group position={[0, 1.1, -6.3]} rotation={[0.2, 0, 0]}>
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Cylindre_2_3_Mat3_0.geometry}
              material={nodes.Cylindre_2_3_Mat3_0.material}
            />
          </group>
          <group position={[0, 0.1, -1.3]} rotation={[0.2, 0, 0]}>
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Cylindre_4_3_Mat3_0.geometry}
              material={nodes.Cylindre_4_3_Mat3_0.material}
            />
          </group>
          <group position={[0, 0.3, -2.1]} rotation={[0.2, 0, 0]}>
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Cylindre_5_Mat3_0.geometry}
              material={nodes.Cylindre_5_Mat3_0.material}
            />
          </group>
          <group position={[0, 0.1, -1.3]} rotation={[0.2, 0, 0]}>
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Cylindre_5_2_lum_0.geometry}
              material={materials.material}
            />
          </group>
        </group>
        <group position={[76, 75, 107.5]} rotation={[-0.1, 0, 0]}>
          <group position={[38, 0.2, 1.5]}>
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Cylindre_1_2_Mat3_0.geometry}
              material={nodes.Cylindre_1_2_Mat3_0.material}
            />
          </group>
          <group position={[38, 0.1, -3.7]}>
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Cylindre_3_2_Mat3_0.geometry}
              material={nodes.Cylindre_3_2_Mat3_0.material}
            />
          </group>
          <group position={[38, 0.2, 0.7]}>
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Cylindre_3_3_Mat3_0.geometry}
              material={nodes.Cylindre_3_3_Mat3_0.material}
            />
          </group>
          <group position={[38, 0.2, 1.5]}>
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Cylindre_4_2_contr_0.geometry}
              material={materials.contr}
            />
          </group>
        </group>
        <group position={[60.5, 6.6, -51.2]} />
        <group position={[-46.8, 6.6, -51.2]} />
        <group position={[-17, 176.3, -16.9]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Neutre_Cube_4_Mat4_0.geometry}
            material={nodes.Neutre_Cube_4_Mat4_0.material}
          />
        </group>
        <group position={[67.8, -43.2, 133]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Plan_2_Cylindre_1_Cube_Mat11_0.geometry}
            material={nodes.Plan_2_Cylindre_1_Cube_Mat11_0.material}
          />
        </group>
        <group position={[67.8, -43.2, 133]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Plan_2_Cylindre_1_Cube_10_Mat11_0.geometry}
            material={nodes.Plan_2_Cylindre_1_Cube_10_Mat11_0.material}
          />
        </group>
        <group position={[16.4, -33.6, 135.5]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Plan_3_Mat11_0.geometry}
            material={nodes.Plan_3_Mat11_0.material}
          />
        </group>
        <group position={[119.3, -33.6, 135.5]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Plan_4_Mat11_0.geometry}
            material={nodes.Plan_4_Mat11_0.material}
          />
        </group>
      </group>
    </group>
  );
}

const Info = () => {
  const textRef = useRef()
  const scroll = useScroll()
  useFrame(() => (textRef.current.position.z = scroll.offset * 3.15))
  return(
    <group ref={textRef}>
    <Text font="/OurFriendElectric-BWr8d.ttf"
        scale={[2, 2, 1]}
        position={[-0.9, 0.3, 1]}
        color="#FF1F1F"
        anchorX="center"
        anchorY="middle">
      IT Solutions
    </Text>
    <Text font="/OurFriendElectric-BWr8d.ttf"
        scale={[1, 1, 1]}
        position={[0.4, 0.3, 1]}
        color="#FF1F1F"
        anchorX="center"
        anchorY="middle">
      We fix technical problems
    </Text>
    <Text font="/Inter-Regular.woff"
        scale={[1, 1, 1]}
        position={[0.7, 0.2, 1]}
        color="#FF1F1F"
        anchorX="center"
        anchorY="middle">
      For your company
    </Text>
    </group>
  )
}

function Home() {
  let timeline = gsap.timeline();
  //load animation 
  let Main = useRef(null)

  useEffect(()=> {
    timeline.from(Main,{
        delay: 1.4,
        duration: 1.2,
        opacity: 0,
        y: 100
    })
})
    // section reveal
  

  return (
  <div className="App" ref={el => Main = el}>
    <Canvas style={{height:1400,width:2100}}>
      <Suspense fallback={null}>
      <ScrollControls pages={0.1}>
        <Model />
        <Info />
      </ScrollControls>
        <Environment preset="sunset" />
        <SecondRow />
      </Suspense>
    </Canvas>
    {/* scroll icon animation */}
    <div className="field">
		  <div className="scroll"></div>
	  </div>
  <div className='container'>
    <div className='wrapper'>
      <h5>
        The <b>HAMBRG</b>, is a creative, engineer driven, global agency
        working on advancing the software, advertising and design communities
        to new heights.
      </h5>
      {/* <img src={img} alt="" /> */}
      <WorkSection />
      <Canvas style={{height:900,width:1800}}>
      <Suspense fallback={null}>
        {/* <PC /> */}
        <Model1 />
        <pointLight position={[10, 10, 10]} intensity={1} />
        {/* <Environment preset="sunset" /> */}
        {/* <OrbitControls /> */}
      </Suspense>
    </Canvas>
    </div>
  </div>
  </div>
  )
}



function App() {
  let timeline = gsap.timeline();
  return (

    <Router>
    <div className="App">
      <Header timeline= {timeline}/>
      <div className="container">
        <div className="wrapper">
          <div className="home">
        <Switch>
          <Route exact path="/" component={Home} />
          <Route exact path="/about" component={About} />
          <Route exact path="/contact" component={Contact} />
        </Switch>
      </div>
      </div>
      </div>
    </div>
    </Router>
  );
}

export default App;
